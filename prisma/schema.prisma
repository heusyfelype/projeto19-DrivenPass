// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  pass      String
  createdAt DateTime @default(now())

  credentials Credentials[]
  safenotes   SafeNotes[]
  cards       Cards[]
  wifiPasses  WifiPasses[]

  @@map("users")
}

model Credentials {
  id        Int      @id @default(autoincrement())
  title     String
  pass      String
  createdAt DateTime @default(now())


  urlId  Int
  url    Urls  @relation(fields: [urlId], references: [id])
  userId Int
  user   Users @relation(fields: [userId], references: [id])


  @@map("credentials")
}

model Urls {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())


  credentials Credentials[]


  @@map("urls")
}

model SafeNotes {
  id        Int      @id @default(autoincrement())
  title     String
  note      String
  createdAt DateTime @default(now())

  userId Int
  user   Users @relation(fields: [userId], references: [id])


  @@map("safeNotes")
}

model Cards {
  id          Int      @id @default(autoincrement())
  number      String
  name        String
  cvc         String
  expiredDate DateTime @default(now()) //verificar como formatar isso aqui
  virtual     Boolean
  createdAt   DateTime @default(now())

  typeId Int
  type   CardTypes @relation(fields: [typeId], references: [id])

  userId Int
  user   Users @relation(fields: [userId], references: [id])


  @@map("cards")
}

model CardTypes {
  id        Int      @id @default(autoincrement())
  type      String
  createdAt DateTime @default(now())

  cards Cards[]


  @@map("cardTypes")
}

model WifiPasses {
  id        Int      @id @default(autoincrement())
  name      String
  pass      String
  createdAt DateTime @default(now())

  userId Int
  user   Users @relation(fields: [userId], references: [id])


  @@map("wifiPasses")
}